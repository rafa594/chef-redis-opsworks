AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyName:
    Description: Name of an existing EC2 key pair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: kp_rtut
  ServiceRole:
    Default: aws-opsworks-service-role
    Description: The OpsWorks service role
    Type: String
  InstanceRole:
    Default: aws-opsworks-ec2-role
    Description: The OpsWorks instance role
    Type: String
Resources:

  SecurityGroupOW:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group para SSH y Redis
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '22'
          ToPort: '22'
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '6379'
          ToPort: '6379'


#                             OpsWorks Stack

  RedisStack:
    Type: 'AWS::OpsWorks::Stack'
    Properties:
      Name: opsworks-rtut-stack
      ServiceRoleArn: !Join
        - ''
        - - 'arn:aws:iam::'
          - !Ref 'AWS::AccountId'
          - ':role/'
          - !Ref ServiceRole
      DefaultInstanceProfileArn: !Join
        - ''
        - - 'arn:aws:iam::'
          - !Ref 'AWS::AccountId'
          - ':instance-profile/'
          - !Ref InstanceRole
      UseCustomCookbooks: 'true'
      ConfigurationManager: {
        "Name": "Chef",
        "Version": "12"
      }
      DefaultSshKeyName: !Ref KeyName
      DefaultOs: "Ubuntu 16.04 LTS"
      CustomCookbooksSource:
        Type: git
        Url: 'https://github.com/rafa594/chef-redis-opsworks.git'



  MasterLayer:
    Type: AWS::OpsWorks::Layer
    Properties:
      StackId: !Ref RedisStack
      Type: custom
      CustomSecurityGroupIds:
        - !GetAtt SecurityGroupOW.GroupId
      Shortname: redis-m
      EnableAutoHealing: 'true'
      AutoAssignElasticIps: 'false'
      AutoAssignPublicIps: 'true'
      Name: redishostmaster
      CustomRecipes:
        Setup:
          - 'redis-cluster::default'
        Configure:
          - 'redis-cluster::master'

  SlaveLayer:
    Type: AWS::OpsWorks::Layer
    Properties:
      StackId: !Ref RedisStack
      Type: custom
      CustomSecurityGroupIds:
        - !GetAtt SecurityGroupOW.GroupId
      Shortname: redis-sl
      EnableAutoHealing: 'true'
      AutoAssignElasticIps: 'false'
      AutoAssignPublicIps: 'true'
      Name: redisslaves
      CustomRecipes:
        Setup:
          - 'redis-cluster::default'
        Configure:
          - 'redis-cluster::slave'

  SentinelLayer:
    Type: AWS::OpsWorks::Layer
    Properties:
      StackId: !Ref RedisStack
      Type: custom
      CustomSecurityGroupIds:
        - !GetAtt SecurityGroupOW.GroupId
      Shortname: redis-sn
      EnableAutoHealing: 'true'
      AutoAssignElasticIps: 'false'
      AutoAssignPublicIps: 'true'
      Name: redissentinel
      CustomRecipes:
        Setup:
          - 'redis-cluster::default'
        Configure:
          - 'redis-cluster::sentinel'




  HostInstance: 
    Type: "AWS::OpsWorks::Instance"
    Properties:       
      StackId: !Ref RedisStack
      LayerIds: 
        - Ref: "MasterLayer"
      InstanceType: "m1.small"
      Hostname: "redishost"

  SlaveInstanceA: 
    Type: "AWS::OpsWorks::Instance"
    Properties:       
      StackId: !Ref RedisStack
      LayerIds: 
        - Ref: "SlaveLayer"
      InstanceType: "m1.small"
      Hostname: "redisslavea"

  